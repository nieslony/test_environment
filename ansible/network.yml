- name: "Configure Network"
  hosts: all
  become: true

  vars:
    network_names:
        "192.168.100.0": "Internet"
        "192.168.101.0": "Lab_DMZ"
        "192.168.110.0": "Lab_Windows_Internal"
        "192.168.120.0": "Lab_Linux_Internal"
        "192.168.121.0": "Management"

    static_network: {}
#        "192.168.120.0": { ip: "192.168.120.250/24", dns: ["192.168.120.254"], gw: "192.168.120.254" }

  tasks:
    - debug:
        var: ansible_facts.interfaces

    - name: "Add NetworkManager connections"
      vars:
        network: "{{ ansible_facts[item].ipv4.network }}"
        is_management: "{{ ansible_facts[item].ipv4.network == '192.168.121.0' }}"
        has_static_ip: "{{ ansible_facts[item].ipv4.network in static_network }}"
        conn_name: >-
            {%- if ansible_facts[item].ipv4.network in network_names -%}
                {{ network_names[ansible_facts[item].ipv4.network] }}
            {%- else -%}
                Other
            {%- endif -%}
      nmcli:
        conn_name: "{{ conn_name }}"
        ifname: "{{ item }}"
        type: ethernet
        state: present
        dns4_ignore_auto: "{{ is_management | ternary(true, omit) }}"
        never_default4: "{{ is_management | ternary(true, omit)}}"
        ip4: "{{ has_static_ip | ternary(static_network[network].ip, omit) }}"
        dns4: "{{ has_static_ip | ternary(static_network[network].dns, omit) }}"
        gw4: "{{ has_static_ip | ternary(static_network[network].gw, omit) }}"
        autoconnect: "{{ (conn_name != 'Internet') or ((ansible_facts.interfaces | length) == 3) }}"
      when:
        - ansible_facts[item].ipv4 is defined
        - ansible_facts[item].type == "ether"
      loop: "{{ ansible_facts.interfaces }}"

    - name: "Find NetworkManager connections"
      command: "nmcli --fields NAME,TYPE --terse con show"
      register: nmcli_con_show
      changed_when: no

    - name: "Remove NetworkManager connections"
      nmcli:
        conn_name: "{{ item.split(':')[0] }}"
        state: absent
      when:
        - item.split(":")[1] == "802-3-ethernet"
        - not item.split(":")[0] in network_names.values()
      loop: "{{ nmcli_con_show.stdout_lines }}"
      register: remove_connections

    - name: "Removing entries like 127.0.0.1 {{ ansible_hostname }} from /etc/hosts"
      lineinfile:
        path: /etc/hosts
        regex: "127.0.[0-9]*.1.*{{ ansible_hostname }}.*"
        state: absent

    - name: "Copy yum.conf -> dnf.conf"
      copy:
        src: "/etc/yum.conf"
        dest: "/etc/dnf/dnf.conf"
        remote_src: true
      when:
        - ansible_facts.os_family == "RedHat"
        - ("/etc/yum.conf" | realpath) != ("/etc/dnf/dnf.conf" | realpath)
