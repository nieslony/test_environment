- name: Configure pfSense

  hosts: all

  vars:
    ansible_user: admin
    ansible_password: pfsense
    ansible_python_interpreter: /usr/local/bin/python3.11

    ansible_ssh_extra_args: '-o ControlMaster=auto -o ControlPersist=60s -o IdentitiesOnly=yes -o ServerAliveInterval=30 -o TCPKeepAlive=yes'

    openVpn_ip: "192.168.101.250"
    ipa_ip: "192.168.120.20"
    site_vpn_net: "192.168.130.0/24"
    user_vpn_net: "192.168.131.0/24"
    hostname: gw
    domain: test.lab

  tasks:
    - name: "Don't block private networks"
      lineinfile:
        path: /conf/config.xml
        regexp: "<blockpriv></blockpriv>"
        state: absent

    - name: "Allow SSH, HTTP, HTTPS and ICMP on WAN"
      pfsensible.core.pfsense_aggregate:
        aggregated_rules:
          - interface: wan
            ipprotocol: inet
            source: any
            destination: (self)
            protocol: tcp
            name: ssh
            destination_port: 22
          - interface: wan
            ipprotocol: inet
            source: any
            destination: (self)
            protocol: tcp
            name: http
            destination_port: 80
          - interface: wan
            ipprotocol: inet
            source: any
            destination: (self)
            protocol: tcp
            name: https
            destination_port: 443
          - interface: wan
            ipprotocol: inet
            source: any
            destination: (self)
            protocol: icmp
            name: icmp
            icmptype: any
      async: 30
      poll: 5

    - name: "Wait 10sec"
      pause:
        seconds: 10

    - name: "Configure Networks"
      pfsensible.core.pfsense_interface:
        interface: "{{ item.interface }}"
        blockpriv: false
        descr: "{{ item.name }}"
        enable: yes
        ipv4_type: "{{ (item.ipv4_address is defined) | ternary('static', 'dhcp') }}"
        ipv4_address: "{{ item.ipv4_address | default(omit) }}"
        ipv4_prefixlen: "{{ (item.ipv4_address is defined) | ternary(24, omit) }}"
        ipv6_type: none
        state: present
      with_items:
        - name: Internet
          interface: vtnet0
        - name: Lab_Windows
          interface: vtnet1
          ipv4_address: 192.168.110.254
        - name: Lab_Linux
          interface: vtnet2
          ipv4_address: 192.168.120.254
        - name: Lab_DMZ
          interface: vtnet3
          ipv4_address: 192.168.101.254

    - name: "Set hostname {{ hostname }}.{{ domain }}"
      pfsensible.core.pfsense_setup:
        hostname: "{{ hostname }}"
        domain: "{{ domain }}"
        timezone: Europe/Vienna

    - name: "Create host alias"
      pfsensible.core.pfsense_alias:
        name: host_arachne
        descr: Arachne OpenVPN server
        type: host
        address: "{{ openVpn_ip }}"
        state: present

    - name: "Allow LAN to everywhere"
      pfsensible.core.pfsense_rule:
        name: "Allow LAN to everywhere"
        interface: "{{ item }}"
        destination: any
        source: any
        quick: false
        state: present
      loop:
        - lan
        - opt1

    - name: "Allow from DMZ"
      pfsensible.core.pfsense_rule:
        name: "Allow port {{ item.port }} to {{ item.dst }}"
        interface: opt2
        protocol: "{{ item.proto | default('tcp') }}"
        destination: "{{ item.dst }}"
        destination_port: "{{ item.port }}"
        source: host_arachne
        quick: false
        state: present
      with_items:
        - dst: "192.168.101.254"
          port: 53
          proto: tcp/udp
        - dst: "{{ ipa_ip }}"
          port: 53
          proto: tcp/udp
        - dst: "{{ ipa_ip }}"
          port: 88
          proto: tcp/udp
        - dst: "{{ ipa_ip }}"
          port: 389
        - dst: "{{ ipa_ip }}"
          port: 443
        - dst: "{{ ipa_ip }}"
          port: 636
        - dst: "192.168.100.0/24"
          port: 22

    - name: "Allow all from VPNs to LAN"
      pfsensible.core.pfsense_rule:
        name: "Allow all from {{ item }} to LAN"
        interface: opt2
        destination: any
        source: "{{ item }}"
        quick: false
        state: present
      with_items:
        - "{{ user_vpn_net }}"
        - "{{ site_vpn_net }}"

    - name: "Allow ICMP"
      pfsensible.core.pfsense_rule:
        name: "Allow ICMP from DMZ to {{ item }}"
        interface: opt2
        destination: "{{ item }}"
        source: host_arachne
        protocol: icmp
        quick: false
        state: present
      with_items:
        - 192.168.101.254
        - 192.168.120.20

    - name: "Configure DNS resolver"
      pfsensible.core.pfsense_dns_resolver:
        state: present
        enablessl: false
        dnssec: false
        dnssecstripped: false
        domainoverrides:
          - domain: windows.lab.
            ip: 192.168.110.20
          - domain: linux.lab.
            ip: 192.168.120.20
        infra_host_ttl: 60

    - name: "Remove forward_tls_upstream"
      lineinfile:
        path: /conf/config.xml
        regexp: "{{ item }}"
        state: absent
      with_items:
        - "<forward_tls_upstream>.*</forward_tls_upstream>"
        - "<dnssec>.*</dnssec>"

    - name: "Forward openVpn to {{ openVpn_ip }}"
      pfsensible.core.pfsense_nat_port_forward:
        descr: openVpn NAT
        interface: wan
        source: any
        destination: "(self):1194"
        target: host_arachne:1194
        protocol: tcp/udp
        state: present
        associated_rule: pass

    - name: "Create openVpn Gateway"
      pfsensible.core.pfsense_gateway:
        name: "openVpn"
        interface: opt2
        gateway: "{{ openVpn_ip }}"
        state: present

    - name: "Add Route to VPNs"
      pfsensible.core.pfsense_route:
        descr: "openVpn: {{ item.descr }}"
        gateway: "openVpn"
        network: "{{ item.net }}"
        state: present
      with_items:
        - net: "{{ user_vpn_net }}"
          descr: UserVpn
        - net: "{{ site_vpn_net }}"
          descr: SiteVpn

    - name: "Get config.xml"
      slurp:
        path: /conf/config.xml
      register: config_xml

    - set_fact:
        config_xml:
          xmlstring: "{{ config_xml.content | b64decode }}"
        config_xml__:
          xmlstring: |
            <?xml version='1.0' encoding='UTF-8'?>
            <pfsense>
                <dhcpd>
                    <lan>
                        <enable/>
                        <range>
                                <from>192.168.1.100</from>
                                <to>192.168.1.199</to>
                        </range>
                    </lan>
                </dhcpd>
            </pfsense>

    - name: "Add node /pfsense/dhcpd"
      xml:
        xmlstring: "{{ config_xml.xmlstring }}"
        xpath: /pfsense/dhcpd
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Set IP ranges"
      xml:
        xmlstring: "{{ config_xml.xmlstring }}"
        xpath: /pfsense/dhcpd
        set_children:
          - lan:
              _:
              - enable:
              - range:
                  _:
                  - from: 192.168.110.10
                  - to: 192.168.110.199
          - opt1:
              _:
              - enable:
              - range:
                  _:
                  - from: 192.168.120.10
                  - to: 192.168.120.199
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Enable kea dhcpserver"
      xml:
        xmlstring: "{{ config_xml.xmlstring }}"
        xpath: /pfsense/dhcpbackend
        value: kea
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Add node unbound"
      xml:
         xmlstring: "{{ config_xml.xmlstring }}"
         xpath: /pfsense/unbound
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Create backup of config.xml"
      copy:
        src: /conf/config.xml
        dest: /conf/config.xml.backup
        remote_src: true
        force: false

    - name: "Write modified config.xml"
      copy:
        content: "{{ config_xml.xmlstring }}"
        dest: /conf/config.xml

    - name: "Apply and reboot"
      reboot:
