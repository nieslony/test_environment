- name: Configure pfSense

  hosts: all

  vars:
    ansible_user: admin
    ansible_password: pfsense
    ansible_python_interpreter: /usr/local/bin/python3.11

    openVpn_ip: "192.168.120.250"
    site_vpn_net: "192.168.130.0/24"
    user_vpn_net: "192.168.131.0/24"
    hostname: gw
    domain: test.lan

  tasks:
    - name: "Don't block priv"
      lineinfile:
        path: /conf/config.xml
        regexp: "<blockpriv></blockpriv>"
        state: absent

    - name: "Allow on WAN"
      pfsensible.core.pfsense_rule:
        name: "Allow {{ item.key }} on WAN"
        action: pass
        interface: wan
        ipprotocol: inet
        protocol: tcp
        source: any
        destination_port: "{{ item.value }}"
        destination: "(self)"
        state: present
      with_dict:
        ssh: 22
        http: 80
        https: 443

    - name: "Configure WAN"
      pfsensible.core.pfsense_interface:
        interface: vtnet0
        blockpriv: false
        descr: Internet
        enable: yes
        ipv4_type: dhcp
        ipv6_type: none

    - name: "Configure Lab_Windows"
      pfsensible.core.pfsense_interface:
        interface: vtnet1
        blockpriv: false
        descr: Lab_Windows
        enable: yes
        ipv4_type: static
        ipv4_address: 192.168.110.254
        ipv4_prefixlen: 24
        ipv6_type: none
        state: present

    - name: "Configure Lab_Linux"
      pfsensible.core.pfsense_interface:
        interface: vtnet2
        blockpriv: false
        descr: Lab_Linux
        enable: yes
        ipv4_type: static
        ipv4_address: 192.168.120.254
        ipv4_prefixlen: 24
        ipv6_type: none
        state: present

    # - name: "Set hostname {{ hostname }}.{{ domain }}"
    #   pfsensible.core.pfsense_setup:
    #     hostname: "{{ hostname }}"
    #     domain: "{{ domain }}"

    - name: "Allow LAN to everywhere"
      pfsensible.core.pfsense_rule:
        name: "Allow LAN to everywhere"
        interface: "{{ item }}"
        destination: any
        source: any
        quick: false
        state: present
      loop:
        - lan
        - opt1

    - name: "Forward openVpn to {{ openVpn_ip }}"
      pfsensible.core.pfsense_nat_port_forward:
        descr: openVpn NAT
        interface: wan
        source: any
        destination: "(self):1194"
        target: "{{ openVpn_ip }}:1194"
        protocol: tcp/udp
        state: present
        associated_rule: pass

    # - name: "Open openVpn from internet"
    #   pfsensible.core.pfsense_rule:
    #     name: "Open openVpn from internet"
    #     sourece: any
    #     interface: wan
    #     ipprotocol: inet
    #     protocol: tcp/udp
    #     destination: "IP:{{ openVpn_ip }}"
    #     destination_port: 1194
    #     state: present

    - name: "Create openVpn Gateway"
      pfsensible.core.pfsense_gateway:
        name: "openVpn"
        interface: opt1
        gateway: "{{ openVpn_ip }}"
        state: present

    - name: "Add Route to user vpn"
      pfsensible.core.pfsense_route:
        descr: "openVpn"
        gateway: "openVpn"
        network: "{{ user_vpn_net }}"
        state: present

    - name: "Add Route to site vpn"
      pfsensible.core.pfsense_route:
        descr: "openVpn"
        gateway: "openVpn"
        network: "{{ site_vpn_net }}"
        state: present

    - name: "Get config.xml"
      slurp:
        path: /conf/config.xml
      register: config_xml

    - set_fact:
        config_xml:
          xmlstring: "{{ config_xml.content | b64decode }}"
        config_xml__:
          xmlstring: |
            <?xml version='1.0' encoding='UTF-8'?>
            <pfsense>
                <dhcpd>
                    <lan>
                        <enable/>
                        <range>
                                <from>192.168.1.100</from>
                                <to>192.168.1.199</to>
                        </range>
                    </lan>
                </dhcpd>
            </pfsense>

    - name: "Add node /pfsense/dhcpd"
      xml:
        xmlstring: "{{ config_xml.xmlstring }}"
        xpath: /pfsense/dhcpd
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Set IP ranges"
      xml:
        xmlstring: "{{ config_xml.xmlstring }}"
        xpath: /pfsense/dhcpd
        set_children:
          - lan:
              _:
              - enable:
              - range:
                  _:
                  - from: 192.168.110.10
                  - to: 192.168.110.199
          - opt1:
              _:
              - enable:
              - range:
                  _:
                  - from: 192.168.120.10
                  - to: 192.168.120.199
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Enable kea dhcpserver"
      xml:
        xmlstring: "{{ config_xml.xmlstring }}"
        xpath: /pfsense/dhcpbackend
        value: kea
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Add node unbound"
      xml:
         xmlstring: "{{ config_xml.xmlstring }}"
         xpath: /pfsense/unbound
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Configure DNS domainoverrides"
      xml:
        xmlstring: "{{ config_xml.xmlstring }}"
        xpath: /pfsense/unbound
        set_children:
          - active_interface: all
          - outgoing_interface: all
          - domainoverrides:
              _:
              - domain: linux.lab.
              - ip: 192.168.120.20
              - descr:
              - tls_hostname:
          - domainoverrides:
              _:
              - domain: windows.lab.
              - ip: 192.168.110.20
              - descr:
              - tls_hostname:
          - enable:
          - system_domain_local_zone_type: transparent
        pretty_print: yes
      register: config_xml
      delegate_to: 127.0.0.1
      vars:
        ansible_python_interpreter: /usr/bin/python3

    - name: "Create backup of config.xml"
      copy:
        src: /conf/config.xml
        dest: /conf/config.xml.backup
        remote_src: true
        force: false

    - name: "Write modified config.xml"
      copy:
        content: "{{ config_xml.xmlstring }}"
        dest: /conf/config.xml

    - name: "Apply and reboot"
      reboot:
